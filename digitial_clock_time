
module Digital_Clock(
    Clk_1sec,  //Clock with 1 Hz frequency
    reset,     //active high reset
    clock_enable, // used to determine mode output
    seconds,
    minutes,
    hours,
    mode);

//What are the Inputs?
    input Clk_1sec;  
    input reset;
    input clock_enable; // if value == 1 it's current time : if value == 0 it's stopwatch time
//What are the Outputs? 
    output [5:0] seconds; // 6 bits needed for binary representation of 60 2^6 = 64
    output [5:0] minutes; // 6 bits needed for binary representation of 60 2^6 = 64
    output [5:0] hours; // 5 bits needed for binary representation of 24 2^5 = 32. *Changed to 6 bits for easy BCD
    output reg mode; // if value of mode == 0 output is for stopwatch otherwise it's the current
//Internal variables.
    reg [5:0] seconds; // 6 bits needed for binary representation of 60 2^6 = 64
    reg [5:0] minutes; // 6 bits needed for binary representation of 60 2^6 = 64
    reg [5:0] hours;  // 5 bits needed for binary representation of 24 2^5 = 32 *Changed to 6 bits for easy BCD

   //Execute the always blocks when the Clock or reset inputs are 
    //changing from 0 to 1(positive edge of the signal)
    always @(posedge(Clk_1sec) or posedge(reset)) //sensitivity list
    begin
        
     
        if(reset == 1'b1) begin  //check for active high reset.
           //reset the time.
            seconds = 0;
            minutes = 0;
            hours = 0;  end
        else if(Clk_1sec == 1'b1) begin  //at the beginning of each second
            seconds = seconds + 1; //increment sec
            if(seconds == 60) begin //check for max value of sec
                seconds = 0;  //reset seconds
                minutes = minutes + 1; //increment minutes
                if(minutes == 60) begin //check for max value of min
                    minutes = 0;  //reset minutes
                    hours = hours + 1;  //increment hours
                   if(hours ==  24) begin  //check for max value of hours
                        hours = 0; //reset hours
		   end
		end
	    end
	end
        
	// first block will check the clock_enable value and set the mode accordingly so output is for either
        // stopwatch or current time
         if(clock_enable == 1'b1)  begin // clock enable = 1 means time output is for clock (current time)
         mode = 1; end
         else if(clock_enable == 1'b0) begin
         mode = 0; end

        


 end

         
	

endmodule
